<job id="Install-Application">
	<!-- script language="VBScript" src="..\..\scripts\ZTIUtility.vbs"/> 
	<script language="VBScript" src="..\..\scripts\ZTIConfigFile.vbs"/>
	<script language="VBScript" src="..\..\scripts\ZTIPSUtility.vbs"/>
	<script language="VBScript" src="..\..\scripts\ZTICustomFunctions.vbs"/>
    <script language="VBScript" src="APP-Custom_Actions.vbs"/-->
	<script language="VBScript" src="ZTIPSUtility.vbs"/>
	<script language="VBScript" src="ZTIUtility.vbs"/>
	<script language="VBScript" src="ZTIConfigFile.vbs"/>
	<script language="VBScript" src="ZTICustomFunctions.vbs"/>
	<script language="VBScript">
'//############################
'//  This script by Diagg/Zany & OpenEyes.
' //  file pattern check by  Jon Bennett - 25 January 2010 
'//   http://zany-openeyes.blogspot.com/
'//   http://www.osd-couture.com/
'// 
'//  Version : 12.1
'//  Release Date : 26/04/2013
'//  Latest Update : 18/01/2018
'//  Usage:     cscript Install_Application.wsf  [/app:"Application pattern detection"] [/name:"Friendly name for logs (use ONLY if you don't want to use the MDT App Name"]  [/arg:"Arguments to pass with the executable"] [/debug:true]
'//  
'//	Note-1 :		To use with read only media, the Event share property should be set like :
'//						[Settings]
'//						Priority=Variables, Default
'//						Properties=EventPath
'//
'//						[Variables]	
'//						EventPath=#oUtility.VerifyPathExists(oUtility.LocalRootPath & "\Events")# 'Create the folder to c:\minint
'//
'//						[Default]
'//						EventShare=#oUtility.LocalRootPath & "\Events"#
'//
'//
'//	Note-2 :		Rules for dealing with X86/X64 installation :
'//						- Never add X86 or X64 to your App file name if you don't have the appS for both architecture in the folder 
'//
'//
'//	Note-3 :		If you need to Tatoo App in the registry, just specify the reg path in the customsettings.ini
'//					with the property AppRegInfo
'//					Ex: AppRegInfo=HKEY_LOCAL_MACHINE\SOFTWARE\OSD-Couture
'//
'//	Note-4 :		Log file are automatically generated for MSI,MSU,CMD and BAT in the C:\Windows\logs\Software
'//					You can specify another path in customsettings.ini with the property AppLogInfo
'//					Ex: AppLogInfo=C:\temp\log
'//
'//
'// Ex : cscript Install_Application.wsf /app:"jre" /arg:"INSTALL_SILENT=1 EULA=0 REBOOT=0 SPONSORS=0"
'// 	Will install jre-8u25-windows-i586.exe with Arguments INSTALL_SILENT=1 EULA=0 REBOOT=0 SPONSORS=0
'//
'// Ex : cscript Install_Application.wsf /app:"jre,PinOffice,SuppressFiles" /arg:"INSTALL_SILENT=1 EULA=0 REBOOT=0 SPONSORS=0,,/S"
'//		Will install Will install jre-8u25-windows-i586.exe with Arguments "INSTALL_SILENT=1 EULA=0 REBOOT=0 SPONSORS=0", then PinOffice.wsf with no argument, then SuppressFiles.exe with Arguments "/S"
'// 
'// 
'//  Change Log : 
'//		19/10/2014 	- 2.0 	- Added file pattern check by Jon Bennett
'//						- Added MSI Support
'//		29/10/2014 	- 2.1 	- Added MSU Support
'//		04/01/2015 	- 3.0 	- Added PS1 Support
'//						- Added EXE with /S
'//						- Added granularity to command line creation
'//		04/01/2015 	- 4.0 	- Added support for arguments
'//		06/01/2015 	- 5.0	- Added GUID and App Name auto discover (needs EventShare property !) 
'//		07/01/2015	- 5.1	- Bug correction
'//						- Added Clean up Events Folder 
'//		13/02/2015	- 6.0	- Added Application information in the registry (Variable AppRegInfo)
'//						- Added gather additional information for Application.xml
'//						- Added VBS/WSF support 
'//						- Added support for multiple applications to launch !
'//						- Added cmd/bat support
'//		17/02/2015	- 6.1 	- Added support for full App Name with extension
'// 		 04/05/2015	- 6.2	- Added support for read only media (see note bellow for details)
'//		11/05/2015	- 6.3	- Added support for Architecture (X64/AMD64/X86) detection in file name and installation
'//		12/05/2015	- 6.4	- Bug fix in events catching
'//		13/05/2015	- 6.5	- Bug fix in Msu command
'//						- Msu logs are now in .evtx
'//						- Added small improvement of log readability
'//						- Added support for default and custom log folder
'//		16/05/2015	- 6.6	- Added support for pending Reboot
'//		24/05/2015	- 6.7	- Bug fix in log file naming
'//		31/05/2015	- 6.8	- Added Security zone check deactivation
'//		23/06/2015	- 6.9	- Added MST and MSP Support
'//						- Added MDT Variables
'//		30/06/2015 	- 7.0	- Custom Functions
'//		02/07/2015	- 7.1	- Added More MDT Variables
'//						- Log File clean up
'//		11/07/2015	- 7.2	- Added Mdt Variable AppFolderPath
'//						- Added support for reg files
'//						- Added support parameters for vbs/wsf and bat/cmd
'//		02/11/2015	- 7.3	- Fixed a bug that prevented apps with small names to work
'//		17/12/2015	- 8.0	- Install-Application.wsf now reside in %ScriptRoot% Folder
'//						- APP-Custom_Actions.vbs is no more mandatory
'//		21/12/2015	- 8.1	- /APP argument is no more mandatory if and only if there is only one single file in the application folder
'//		24/01/2015	- 8.2	- Custom action can now empty the command to launch without problem 
'//		26/01/2016	- 8.3	- Fixed a big bug that prevented .cmd to be launched from a network path
'//		05/02/2016	- 8.4	- Bug Fix oEnvironment.Item("AppVersion") was not cleared
'//						- Changed the way that Application folder is retrived for greater reliability 
'//		06/02/2016	- 8.5	- Big code clean up (Oh my god, that was awful...)
'// 						- Reboot are no more sent to ZTIApplication.
'//		18/02/2016	- 8.5.1 - Reboot process removed
'//		05/03/2016	- 8.6	- Added Include with special function like Active-setup-Pin etc...
'//						- Excluded install.txt from file name to seek for
'//		30/06/2016	- 8.7	- Added condition  variable "AppConditions" before launching the exe to install 
'//		05/07/2016	- 8.7.1- Clean up is now a function
'//						- Default log is now Minint\smsosdlog
'//		19/08/2016	-8.8	-  Fixed some bugs
'//		20/08/2016	-8.9 	- Fixed a big logical bug that prevented some app to install
'//						- Fixed a bug that prevented  chained applications to be installed after the first one
'//		19/09/2016	-9.0	- Support for APP-Custom_Actions.PS1
'//						- Added AppParameters variable
'//						- AppCommand  is now equal to  AppFileName + " " +  AppParameters
'//		28/09/2016	-9.1	- File count routine in folder now exclude install.txt APP-Custom_Actions.ps1 et APP-Custom_Actions.vbs from final result
'//		31/10/2016	-9.2	- Fixed a bug in PS1 execution
'//		27/12/2016	-9.3	- Added AppPSHostX86 = Yes/No to select Powershell host
'//		28/02/2017	-9.4	- Added Support For custom action (APP-Custom_Actions.ps1 et APP-Custom_Actions.vbs ) without requiring additional exe. Action are called with function/parameter "StandAloneCustomAction"
'//		01/03/2017	-9.5	- Removed 	AppCommand  = AppFileName + " " +  AppParameters because it can not handle command line before file name (ex:Msiexec /I)	
'//		09/03/2017	-9.6	- Bug fix when application was launched with /app arguments	
'//		29/07/2017	-10.0	- Event Share is no more required
'//		18/10/2017	-11.0	- Code Clean up and re-factoring
'//					- x86, x64 or amd64 don't need to be placed at the end of file name any more
'//		18/01/2017	-11.1	- Simplified logging for CMD/BAT now all installation type except Powershell are now logged with console output
'//		07/03/2018	-12.0	- Added PEID support for automatic silent switch detection
'//		19/03/2018	-12.1	- massive Code Clean up and Debugging	
'//							
'//
'//############################	
	
Option Explicit
RunNewInstance

'//############################
'//  Main Class
'//############################

Class Install_Application

    '//############################
    '//  Global constant and variable declarations
    '//############################

    Dim iRetVal
    '//############################
    '//  Constructor to initialize needed global objects
    '//############################

    Private Sub Class_Initialize

    End Sub
    '//############################
    '//  Main routine
    '//############################

    Function Main
	
		Dim oAppCommand, oAppExecutable, oSingleExe, oAppCmd, sFullInstaller
		Dim oFolder, files, folderIdx
		Dim sInstaller, oRegExp, sExt, sBaseName, sTrans
		Dim oProcessCustomAction, oCustomFileType, oFileCount, oFileAch
		Dim oAppNb : oAppNb = 0
		ReDim fileArray(-1)
		
		Set oRegExp = CreateObject("VBScript.RegExp")
		oProcessCustomAction = False
		sInstaller = ""
		
		'############

		'Retrieve Application location
		oLogging.CreateEntry "Current folder (Retrieved form previous location) = " & oShell.CurrentDirectory, LogTypeInfo
		oEnvironment.Item("AppFolderPath") = oShell.CurrentDirectory

		'Get Files from the application folder
		Set oFolder = oFSO.GetFolder(oEnvironment.Item("AppFolderPath"))
		Set files = oFolder.Files
		
		'Count files
		oFileCount = 0
		For Each folderIdx In files
			IF Ucase(folderIdx.Name) <> "APP-CUSTOM_ACTIONS.VBS" and Ucase(folderIdx.Name) <> "APP-CUSTOM_ACTIONS.PS1" and Ucase(folderIdx.Name) <> "INSTALL.TXT" Then 
				oFileCount = oFileCount + 1
				ReDim Preserve fileArray(UBound(fileArray) + 1)
				fileArray(UBound(fileArray)) = folderIdx.Name				
			End If	
				
		Next 
		oLogging.CreateEntry "amount of files found in this folder (minus custom-action and install.txt files): " & oFileCount, LogTypeInfo

		
		
		'Check if a /App argument is specified
		If oUtility.Arguments("app") <>"" then 
			' Replace MDT variables and Split
			oLogging.CreateEntry "Resolving /APP argument environment variables from: " & oUtility.Arguments("app") & " to " &  oEnvironment.Substitute (oUtility.Arguments("app")) , LogTypeInfo
			oAppExecutable = split(oEnvironment.Substitute (oUtility.Arguments("app")),",")
		Else
			' The /APP argument can be omitted if the application to install is just one file or an Msi With an MST, or an x86 and x64 duo App.
			oLogging.CreateEntry "No /APP argument Found ! Figuring out if we can at least launch an app...", LogTypeInfo
			
			If oFileCount > 4 Then
				oLogging.CreateEntry "ERROR: /APP argument missing, and too many files (" & oFileCount & ") to figure out which one is an App !!! Unable to install...", LogTypeError
				CleanUp_Environment
				Exit Function
			Else
				
				'Set Regex
				oRegExp.Pattern = "(.*)\.(exe|msi|msu|msp|ps1|vbs|wsf|cmd|bat|reg)"
				oRegExp.IgnoreCase = True				
								
												    
				For Each folderIdx In fileArray
				
					oLogging.CreateEntry "Processing = " & Ucase(folderIdx), LogTypeInfo
										
					If oRegExp.Test(folderIdx) Then 
						oLogging.CreateEntry Ucase(folderIdx) & " Meet the requirements !" , LogTypeInfo
						oLogging.CreateEntry "investigation finished, the discovered App file is = " & folderIdx, LogTypeInfo
						'Ugly trick to convert back my single value to an array
						oAppExecutable = split(folderIdx,",")
						Exit For
					End If
				
				Next
			End If
		End if
		
		
		'Checking If there is just an APP-CUSTOM_ACTIONS to execute.
		If oFileCount = 0 Then
			oProcessCustomAction = True
			If oFSO.FileExists ("APP-Custom_Actions.vbs") Then 
				oCustomFileType = "VBS"
				IncludeFile "APP-Custom_Actions." & oCustomFileType
			ElseIf oFSO.FileExists ("APP-Custom_Actions.ps1") Then	
				oCustomFileType = "PS1"
			End If	
				
			oLogging.CreateEntry "investigation finished, There is no app to launch but there is a customization file to launch: APP-Custom_Actions." & oCustomFileType, LogTypeInfo
			oLogging.CreateEntry "Number of Apps to proceed = 0" , LogTypeInfo
			oEnvironment.Item("AppCommand")=""
			oAppExecutable = Null
			GetMDTAppInfo 'Retrive info from MDT's xml Files, and create MDT variables					
			oLogging.CreateEntry oCustomFileType & " Custom action file found", LogTypeInfo

			'Checking Conditions before launching
			If oCustomFileType <> "" Then 
				oLogging.CreateEntry "Calling Pre-Check conditions !", LogTypeInfo
				If oCustomFileType = "VBS" then CheckConditions 'call the function that will evaluate condition and change the value of "AppConditions"
				If oCustomFileType = "PS1" then oEnvironment.Item("Parameters") = "CheckConditions" : iRetVal = RunPowerShellScript(oEnvironment.Item("AppFolderPath") & "\APP-Custom_Actions.ps1", false)

				If oEnvironment.Item("AppConditions") <> "True" Then
					oLogging.CreateEntry "ERROR: Pre-Check conditions are not met, Custom actions will not proceed!!!...", LogTypeInfo
					CleanUp_Environment
					Exit Function
				ElseIf oEnvironment.Item("AppConditions") = "True" Then 
					oLogging.CreateEntry "Pre-Check conditions are met, Custom actions execution will proceed!!!...", LogTypeInfo	
				End If

				'Calling custom actions before installation
				oLogging.CreateEntry "Calling custom actions !", LogTypeInfo
				If oCustomFileType = "VBS" then StandAloneCustomAction
				If oCustomFileType = "PS1" then oEnvironment.Item("Parameters") = "StandAloneCustomAction" : iRetVal = RunPowerShellScript(oEnvironment.Item("AppFolderPath") & "\APP-Custom_Actions.ps1", false)
				
				oLogging.CreateEntry "Exiting  Custom Action Execution ", LogTypeInfo
				oLogging.CreateEntry "##########################################################", LogTypeInfo
			End If
		End If	
		
		'Process when there are some apps to launch 
		If oFileCount <> 0 and oStrings.isNullOrEmpty(oAppExecutable) = false Then
			oLogging.CreateEntry "Number of Apps to proceed = " & uBound(oAppExecutable)+1, LogTypeInfo
			
			If oUtility.Arguments("name") <>"" then	oEnvironment.Item("AppName") = oUtility.Arguments("name")
			
			If oUtility.Arguments("arg") <>"" then 
				' Replace MDT variables and Split
				oLogging.CreateEntry "Resolving /ARG argument environment variables from: " & oUtility.Arguments("arg") & " to " &  oEnvironment.Substitute (oUtility.Arguments("arg")) , LogTypeInfo
				' Split only if we have to launch more than 1 application 
				If uBound(oAppExecutable)+1 > 1 Then 
					oAppCommand = split(oEnvironment.Substitute (oUtility.Arguments("arg")),",")
				Else 
					oAppCommand = split(oEnvironment.Substitute (oUtility.Arguments("arg")),"") 'Trick that change string to array even with one single value
				End	If
			Else
				Redim oAppCommand(1)
				oAppCommand(0) = "" 
			End If	
			
			'Retrive info from MDT's xml Files, and create MDT variables
			GetMDTAppInfo		
			
			'Check informations for each app specified in the /app argument
			For Each oSingleExe in oAppExecutable
		
				oLogging.CreateEntry "Working on app: " & oSingleExe, LogTypeInfo
				oEnvironment.Item("AppState") = "Installing"
				
				' Verify and create Log folder
				if oEnvironment.Exists("AppLogInfo") Then
					if not oUtility.VerifyPathExists (oEnvironment.item("AppLogInfo")) Then oEnvironment.item("AppLogInfo") = oUtility.LogPath			
				Else	
					oEnvironment.item("AppLogInfo") = oUtility.LogPath
				End If
				
				oLogging.CreateEntry "Default log folder for MSI,MSU,CMD and BAT is " & oEnvironment.item("AppLogInfo"), LogTypeInfo
			
				'############
				
				Set oFolder = oFSO.GetFolder(oEnvironment.Item("AppFolderPath"))
				oLogging.CreateEntry "Current folder = " & oEnvironment.Item("AppFolderPath"), LogTypeInfo
				
				If Len(oSingleExe) >= 5 and oRegExp.test(oSingleExe) = True and oUtility.Arguments("app") ="" Then
					oLogging.CreateEntry "Searching for " & oEnvironment.Item("AppFolderPath") & "\" & oSingleExe, LogTypeInfo
					If oFso.FileExists(oEnvironment.Item("AppFolderPath") & "\" & oSingleExe) Then sInstaller = oSingleExe
				Else				
					oRegExp.Pattern = oSingleExe + "(.*)\.(exe|msi|msu|msp|ps1|vbs|wsf|cmd|bat|reg)"
					oRegExp.IgnoreCase = True
									
					Set files = oFolder.Files    
					For Each folderIdx In files
						
						'Uncomment the next line for debug purpose
						oLogging.CreateEntry "Evaluating " & folderIdx.Name, LogTypeInfo
						
						If oRegExp.Test(folderIdx.Name) Then 
							If (InStr(Ucase(folderIdx.Name),"X64") > 0 or InStr(Ucase(folderIdx.Name),"AMD64") > 0) then oFileAch = "X64" 'Applications with X64/AMD64 in their name 
							If InStr(Ucase(folderIdx.Name),"X86") > 0 then oFileAch = "X86" 'Applications with X86 in their name
								
							If oEnvironment.item("Architecture") = oFileAch Then 
								sInstaller = folderIdx.Name : Exit For
							Else
								'Every other Applications !!
								sInstaller = folderIdx.Name : Exit For
							End If
						End If 
					Next
				End If

				If sInstaller = "" Then
					oLogging.CreateEntry "ERROR: " & oSingleExe & ": file was not found, unable to install !!!...", LogTypeWarning
					CleanUp_Environment
					Exit Function
				Else

					sExt = Ucase(oFSO.getextensionname(sInstaller))
					sBaseName = oFSO.GetBaseName(sInstaller)				
					sFullInstaller = oFSO.GetFile(sInstaller).path
					
					' Try Finding an .MST if we've found an .MSI
					If sExt = "MSI" and oFSO.FileExists(sBaseName & ".MST") then
						sTrans = sBaseName & ".MST"
						oLogging.CreateEntry "Found a Transform file called " & sTrans & " to apply with MSI " & sInstaller, LogTypeInfo
					End If
					
					
					'If oAppName ="" then oAppName = sBaseName
					oLogging.CreateEntry "Found matching application executable " & Ucase(sInstaller) & " with friendly name : " & oEnvironment.Item("AppName"), LogTypeInfo
					oLogging.CreateEntry "App Arg = " & oAppCommand(oAppNb), LogTypeInfo
				End If
								

				'Rebuild full Command line
				If sExt = "MSI" and oAppCommand(oAppNb) ="" Then 
					If sTrans = "" Then
						oAppCmd = "Msiexec /i """ & sInstaller & """ /qb /norestart /l* """ & oEnvironment.item("AppLogInfo") & "\" & replace(oEnvironment.Item("AppName")," ","_") & ".Log"""
					Else
						oAppCmd = "Msiexec /i """ & sInstaller & """ TRANSFORMS=""" & sTrans & """ /qb /norestart /l* """ & oEnvironment.item("AppLogInfo") & "\" & replace(oEnvironment.Item("AppName")," ","_") & ".Log"""
					End If
					oLogging.CreateEntry "Installation log file will be stored in : """ & oEnvironment.item("AppLogInfo") & "\" & replace(oEnvironment.Item("AppName")," ","_") & ".Log""", LogTypeInfo
				ElseIf sExt = "MSI" and oAppCommand(oAppNb) <>"" Then
					If sTrans = "" Then
						oAppCmd = "Msiexec /i """ & sInstaller & """ " & oAppCommand(oAppNb)
					Else
						oAppCmd = "Msiexec /i """ & sInstaller & """ TRANSFORMS=""" & sTrans & """ " & oAppCommand(oAppNb)
					End If
			
				ElseIf sExt = "MSP" and oAppCommand(oAppNb) ="" Then 
					oAppCmd = "Msiexec /p """ & sInstaller & """ /qb /norestart /l* """ & oEnvironment.item("AppLogInfo") & "\" & replace(oEnvironment.Item("AppName")," ","_") & ".Log"""
					oLogging.CreateEntry "Installation log file will be stored in : """ & oEnvironment.item("AppLogInfo") & "\" & replace(oEnvironment.Item("AppName")," ","_") & ".Log""", LogTypeInfo
				ElseIf sExt = "MSP" and oAppCommand(oAppNb) <>"" Then 
					oAppCmd = "Msiexec /p """ & sInstaller & """ " & oAppCommand(oAppNb)				
				
				ElseIf sExt = "MSU" and oAppCommand(oAppNb) ="" Then 
					oAppCmd = "Wusa """ & sInstaller & """ /quiet /norestart /log:""" & oEnvironment.item("AppLogInfo") & "\" & replace(oEnvironment.Item("AppName")," ","_") & ".evtx"""
					oLogging.CreateEntry "Installation log file will be stored in : """ & oEnvironment.item("AppLogInfo") & "\" & replace(oEnvironment.Item("AppName")," ","_") & ".Evtx""", LogTypeInfo
				ElseIf sExt = "MSU" and oAppCommand(oAppNb) <>"" Then 
					oAppCmd = "Wusa """ & sInstaller & """ " & oAppCommand(oAppNb)		
				
				ElseIf sExt = "EXE" and oAppCommand(oAppNb) ="" Then 
					CallPeID sFullInstaller
					oAppCmd = sInstaller & oEnvironment.item("AppExeSwitches")
				ElseIf sExt = "EXE" and oAppCommand(oAppNb) <>"" Then 
					oAppCmd = sInstaller & " " & oAppCommand(oAppNb)			
				
				ElseIf sExt = "PS1" and oAppCommand(oAppNb) <>"" Then 
					oEnvironment.Item("Parameters") = oAppCommand(oAppNb)
					oAppCmd = "#SendToPowershellEngine#"
				
				ElseIf (sExt = "VBS" or sExt = "WSF") and oAppCommand(oAppNb) ="" Then 
					oAppCmd = "cscript " & sInstaller
				ElseIf (sExt = "VBS" or sExt = "WSF") and oAppCommand(oAppNb) <>"" Then 
					oAppCmd = "cscript " & sInstaller & " " & oAppCommand(oAppNb) 				
				
				ElseIf (sExt = "CMD" or sExt = "BAT") and oAppCommand(oAppNb) ="" Then 
					oAppCmd = "cmd.exe /C " & sInstaller
				ElseIf (sExt = "CMD" or sExt = "BAT") and oAppCommand(oAppNb) <>"" Then 
					oAppCmd = "cmd.exe /C " & sInstaller & " " & oAppCommand(oAppNb)
					
				ElseIf sExt = "REG" Then 
					oAppCmd =  "Reg.exe imports """ &  Installer & """"

				Else 	
					oAppCmd = sInstaller + " " + oAppCommand(oAppNb)
				End If
				
				'Create MDT Variables
				oEnvironment.Item("AppExtension") = sExt
				oEnvironment.Item("AppFileName") = sInstaller
				oEnvironment.Item("AppFullPath") = sFullInstaller
				oEnvironment.Item("AppParameters") = oAppCommand(oAppNb)
				oEnvironment.Item("AppCommand") = oAppCmd
				oEnvironment.Item("AppConditions") = "True"
	
		
				'Load Includes
				If oFSO.FileExists ("APP-Custom_Actions.vbs") Then 
					IncludeFile "APP-Custom_Actions.vbs"
					oLogging.CreateEntry "VBS Custom action file found and loaded", LogTypeInfo
					oProcessCustomAction = True
					oCustomFileType = "VBS"
				ElseIf oFSO.FileExists ("APP-Custom_Actions.ps1") Then 
					oLogging.CreateEntry "PowerShell Custom action file found", LogTypeInfo
					oProcessCustomAction = True
					oCustomFileType = "PS1"
				Else
					oProcessCustomAction = False
					oLogging.CreateEntry "No Custom action file found, proceeding to next step !", LogTypeInfo
				End If

			
				'Checking Conditions before launching
				If oProcessCustomAction Then 
					oLogging.CreateEntry "Calling Pre-Check conditions !", LogTypeInfo
					If oCustomFileType = "VBS" then CheckConditions 'call the function that will evaluate condition and change the value of "AppConditions"
					If oCustomFileType = "PS1" then oEnvironment.Item("Parameters") = "CheckConditions" : iRetVal = RunPowerShellScript(oEnvironment.Item("AppFolderPath") & "\APP-Custom_Actions.ps1", false)

					If oEnvironment.Item("AppConditions") <> "True" Then
						oLogging.CreateEntry "ERROR: Pre-Check conditions are not met, installation will not proceed!!!...", LogTypeInfo
						CleanUp_Environment
						Exit Function
					ElseIf oEnvironment.Item("AppConditions") = "True" Then 
						oLogging.CreateEntry "Pre-Check conditions are met, installation will proceed!!!...", LogTypeInfo	
					End If
				End If	
					

				'Calling custom actions before installation
				If oProcessCustomAction Then
					oLogging.CreateEntry "Calling custom actions before installation !", LogTypeInfo
					If oCustomFileType = "VBS" then ActionsBeforeInstall
					If oCustomFileType = "PS1" then oEnvironment.Item("Parameters") = "ActionsBeforeInstall" : iRetVal = RunPowerShellScript(oEnvironment.Item("AppFolderPath") & "\APP-Custom_Actions.ps1", false)
				End IF				
			
				'Install Application
				oLogging.CreateEntry "Installing "& oEnvironment.Item("AppName") &" Application", LogTypeInfo
				
				' Disable Zone Checks
				oEnv("SEE_MASK_NOZONECHECKS") = 1 
				
				'Check if Custom_Actions did not Brock or intentionally cleaned the app to launch.
				If oEnvironment.Item("AppCommand")<>"" Then
				
					If sExt <> "PS1" Then
						oLogging.CreateEntry "command line to execute is "& oEnvironment.Item("AppCommand"), LogTypeInfo
						iRetVal = oUtility.RunWithConsoleLogging(oEnvironment.Item("AppCommand"))
					Else
						oLogging.CreateEntry "command line to execute is "& oEnvironment.Item("AppFileName"), LogTypeInfo
						If Ucase(oEnvironment.Item("AppPSHostX86")) = "YES" Then
							iRetVal = RunPowerShellScript(oEnvironment.Item("AppFileName"), true)
						Else	
							iRetVal = RunPowerShellScript(oEnvironment.Item("AppFileName"), false)
						End If	
					End If
					
				Else
					If oProcessCustomAction = True Then
						oLogging.CreateEntry "No command to execute (maybe due to custom action)...  but that's probably ok ! ", LogTypeInfo
						iRetVal = 0
					End If	
				End If	
					
				' Enable Zone Checks
				oEnv.Remove("SEE_MASK_NOZONECHECKS")
					
				If iRetVal = 0 Then
					oLogging.CreateEntry "####  " & oEnvironment.Item("AppName") & " installed successfully !  ####", LogTypeInfo 
					oAppNb = oAppNb + 1
					
					'Calling custom actions after successful installation
					If oProcessCustomAction Then
						oLogging.CreateEntry "Calling custom actions after successful installation !", LogTypeInfo
						If oCustomFileType = "VBS" then ActionsAfterSuccessfullInstall
						If oCustomFileType = "PS1" then oEnvironment.Item("Parameters") = "ActionsAfterSuccessfullInstall" : iRetVal = RunPowerShellScript(oEnvironment.Item("AppFolderPath") & "\APP-Custom_Actions.ps1", false)
					End IF					
					
					'# Add Application Info to the registry
					SetApplicationInfoToReg oEnvironment.Item("AppName")
					oEnvironment.Item("AppState") = "Installed"
					
				ElseIf iRetVal = 3010 then
					oLogging.CreateEntry "####  " & oEnvironment.Item("AppName") & " installed successfully, but a reboot is required !  ####", LogTypeInfo 
					oAppNb = oAppNb + 1
					oLogging.CreateEntry "a request for reboot was registered", LogTypeInfo
					
					'Calling custom actions after successful installation
					If oProcessCustomAction Then
						oLogging.CreateEntry "Calling custom actions after successful installation !", LogTypeInfo
						If oCustomFileType = "VBS" then ActionsAfterSuccessfullInstall
						If oCustomFileType = "PS1" then oEnvironment.Item("Parameters") = "ActionsAfterSuccessfullInstall" : iRetVal = RunPowerShellScript(oEnvironment.Item("AppFolderPath") & "\APP-Custom_Actions.ps1", false)
					End IF	
					
					'# Add Application Info to the registry
					SetApplicationInfoToReg oEnvironment.Item("AppName")
					oEnvironment.Item("AppState") = "Installed"
					
				Else
					oLogging.CreateEntry "ERROR : Unable to install " & oEnvironment.Item("AppName") & " , Return code is : " & iRetVal, LogTypeWarning
					Main = iRetVal
					oEnvironment.Item("AppState") = "Failed"
					
					'Calling custom actions after failed installation
					If oProcessCustomAction Then
						oLogging.CreateEntry "Calling custom actions after failed installation !", LogTypeInfo
						If oCustomFileType = "VBS" then ActionsAfterFailedfullInstall
						If oCustomFileType = "PS1" then oEnvironment.Item("Parameters") = "ActionsAfterFailedfullInstall" : iRetVal = RunPowerShellScript(oEnvironment.Item("AppFolderPath") & "\APP-Custom_Actions.ps1", false)
					End IF	
					
				End If
				
				oLogging.CreateEntry "Exiting  installation of " & oEnvironment.Item("AppName"), LogTypeInfo
				oLogging.CreateEntry "##########################################################", LogTypeInfo				
				
			Next	
		End If	
	
		CleanUp_Environment
		
	End Function

	
	Function GetApplicationInfo
	
		oLogging.CreateEntry "Retrieve Application infos from Log file " & oUtility.LogPath & "\ZTIApplications.log", LogTypeinfo
		Dim  nLines, j, i, oLineGUID, oLineName, oStr
		i=0

		nlines = split(nlines,"")
		nLines = ReadLastLines (oUtility.LogPath & "\ZTIApplications.log",25)
		' Small tip: To be able to return an Split objet, you must call the function using a join or split command to put the nlines variable in the correct type
		'Ex:   nLines = Join(ReadLastLines ("C:\MININT\SMSOSD\OSDLOGS\ZTIApplications.log",25),"")
		'Or Transform the variable with a split/join before calling the function, Ex:  nlines = split(nlines,"")
		
		If nLines(0) = Null Then 
			oLogging.CreateEntry "Unable to find Application GUID in ZTIApplications.log !!! Unable to install...", LogTypeError
			WScript.Quit 1
		End If
 
		For Each j in nLines
			oStr = instr (j,"Entry: {")
			If oStr > 0 Then
				oLineGUID = Trim(Mid(j, oStr+7, oStr-7+37))
				oEnvironment.Item("AppGUID") = oLineGUID 
				oLineName = nLines(i+1)
				oEnvironment.Item("AppName") = Trim(GetStringBetween(oLineName,"[Name:","]LOG"))
			End If
			i=i+1
		Next
	
		'#  Reading additional info in the XML file
		'############################
		ReadAppXmlInfo (oEnvironment.Item("AppGUID"))
				
	End Function

	
	Function SetApplicationInfoToReg (AppName)
	
		Dim oKey
		Err.Clear
	
		If oEnvironment.exists("AppRegInfo") Then 
		
			oKey = oEnvironment.item("AppRegInfo")
			
			If right (oKey,1) <> "\" Then oKey = oKey & "\"
			
				On error resume next
					oShell.RegWrite oKey & AppName &  "\Installation Date", Date, "REG_SZ"
					if oEnvironment.Exists("AppPublisher") then oShell.RegWrite oKey & AppName &  "\Publisher", oEnvironment.Item("AppPublisher"), "REG_SZ"
					if oEnvironment.Exists("AppVersion") then oShell.RegWrite oKey & AppName &  "\ProductVersion", oEnvironment.Item("AppVersion"), "REG_SZ"
					if oEnvironment.Exists("AppLanguage") then oShell.RegWrite oKey & AppName &  "\Language", oEnvironment.Item("AppLanguage"), "REG_SZ"
				If Err then
					oLogging.CreateEntry "The path specified in property AppRegInfo (" & oEnvironment.item("AppRegInfo") & ") is invalid, unable to write application info to the registry !", LogTypeWarning
					Err.Clear
				Else
					oLogging.CreateEntry "Application info written successfully to the registry key " & oKey & AppName, LogTypeInfo
				End If
			
		Else
			oLogging.CreateEntry "No value found for variable AppRegInfo. No info to write to the registry ", LogTypeInfo
		End If
	End Function
	
	Function ReadAppXmlInfo (SGuid)
	
		Dim oXMLApps, dAvaiableApps, oNode
		
		set oXMLApps = new ConfigFile
		oXMLApps.sFileType = "Applications"
		set dAvaiableApps = oXMLApps.FindAllItems
		
		
		' Find the entry in the XML document

		If not dAvaiableApps.Exists(sGuid) then
			oLogging.CreateEntry "ERROR, application GUID " & sGuid & " not found in application list, unable to execute", LogTypeError
			WScript.Quit 1
		Else
			set oNode = dAvaiableApps.Item(sGuid)
			
			If not oNode.SelectSingleNode("Publisher") is nothing Then
				If oUtility.SelectSingleNodeString(oNode,"Publisher") <>"" Then
					oEnvironment.Item("AppPublisher") = oUtility.SelectSingleNodeString(oNode,"Publisher")
				End If	
			Else
				oLogging.CreateEntry "No content found for the tag <Publisher> !!!!", LogTypeInfo
			End If


			If not oNode.SelectSingleNode("Version") is nothing Then
				If oUtility.SelectSingleNodeString(oNode,"Version") <>"" then 
					oEnvironment.Item("AppVersion") = oUtility.SelectSingleNodeString(oNode,"Version")
				End If	
			Else
				oLogging.CreateEntry "No content found for the tag <Version> !!!!", LogTypeInfo
			End If
			
			
			If not oNode.SelectSingleNode("Comments") is nothing Then
				If oUtility.SelectSingleNodeString(oNode,"Comments") <> "" then 
					oEnvironment.Item("AppComments") = oUtility.SelectSingleNodeString(oNode,"Comments")
				End If	
			Else
				oLogging.CreateEntry "No content found for the tag <Comments> !!!!", LogTypeInfo
			End If
			
			If not oNode.SelectSingleNode("Language") is nothing Then 
				If oUtility.SelectSingleNodeString(oNode,"Language") <> "" then 
					oEnvironment.Item("AppLanguage") = oUtility.SelectSingleNodeString(oNode,"Language")
				End IF	
			Else
				oLogging.CreateEntry "No content found for the tag <Language> !!!!", LogTypeInfo
			End If			
			
		End if		

	End Function
	
	sub IncludeFile (oVbsFile)
		ExecuteGlobal oFSO.OpenTextFile (oVbsFile).readAll()
	End Sub
	
	Function GetMDTAppInfo
	
		'Get infos from the MDT Applications.xml file.
		GetApplicationInfo
		
		'Create  a Nice readable title for logs !!!
		Dim oAppLen,oPos, ostring
		oApplen = Int(len(oEnvironment.Item("AppName") & " - ver: " & oEnvironment.Item("AppVersion"))/2)
		
		If oApplen < 29 then oPos = 29-oAppLen Else oPos = 1
		ostring = "#" & Space(oPos) & oEnvironment.Item("AppName") & " - ver: " & oEnvironment.Item("AppVersion")
		oApplen = 57 - len(ostring)
		If oApplen < 0 then oApplen = 1
		ostring = ostring & Space(oApplen) & "#"
		
		If oApplen = 1 then
			wscript.echo string (len(oEnvironment.Item("AppName")) +4,"#")
		Else	
			oLogging.CreateEntry "##########################################################", LogTypeInfo
		End	if	
			oLogging.CreateEntry ostring, LogTypeInfo
		If oApplen = 1 then
			oLogging.CreateEntry string (len(oEnvironment.Item("AppName")) +4,"#"), LogTypeInfo
		Else	
			oLogging.CreateEntry "##########################################################", LogTypeInfo
		End	if	
		
		GetMDTAppInfo = True
	
	End Function

	Function CleanUp_Environment
	
		'# Clean Up Values
		'############################
		oEnvironment.Item("AppExtension") = ""
		oEnvironment.Item("AppFileName") = ""
		oEnvironment.Item("AppFullPath") = ""
		oEnvironment.Item("AppFolderPath") = ""
		oEnvironment.Item("AppCommand") = ""
		oEnvironment.Item("AppParameters") = ""
		oEnvironment.Item("AppName") = ""
		oEnvironment.Item("AppVersion") = ""
		oEnvironment.Item("AppConditions") = ""
		oEnvironment.Item("AppState") = "waiting"	
	
	End Function
	
	
	
    Function CallPeID (oAppFullPath)
	
		Dim  oPEIDPath, oPEIDWindowName, oPEIDString, oRootTools
		
		If RegisterAutoIT = False Then 
			oLogging.CreateEntry "Unable to register AutoIT Dll, rolling back to standard method !", LogTypeInfo
			oEnvironment.item("AppExeSwitches") = " /S"
			Exit Function
		End If	
		
		oPEIDWindowName = "PEiD"
		
		'// Hide the PEiD window a bit better by getting rid of its on-top attribute
		oShell.RegWrite "HKEY_CURRENT_USER\Software\PEiD", 0, "REG_DWORD"
		
		
		'// Load PEID
		oRootTools = oEnvironment.Item("DeployRoot") & "\Tools\"
		'oRootTools = "E:\Deploy\Tools\" ' Debug
		
		If oFSO.FileExists(oRootTools & "x86\PEID.exe") then
			oPEIDPath = oRootTools & "x86\PEID.exe"
		Else 	
			oLogging.CreateEntry "Unable to Find " & oPEIDPath & ", rolling back to standard method !", LogTypeInfo
			oEnvironment.item("AppExeSwitches") = " /S"
			Exit Function			
		End if
		
		
		If not oFSO.FileExists(oAppFullPath) then
			oLogging.CreateEntry "[ERROR] Unable to Find " & oAppFullPath & ", rolling back to standard method !", LogTypeInfo
			oEnvironment.item("AppExeSwitches") = " /S"
			Exit Function			
		End If
		
		
		oAutoIt.Run oPEIDPath  & " -hard """ & oAppFullPath  & """", "", oAutoIt.SW_HIDE
		'oUtility.RunCommand oPEIDPath  & " -hard """ & oAppFullPath  & """", 0, false

		iF oAutoIt.WinWait (oPEIDWindowName, "", 3) then
			oAutoIt.WinSetState oPEIDWindowName, "", oAutoIt.SW_HIDE
			WScript.Sleep(1500)
			oPEIDString = oAutoIt.ControlGetText(oPEIDWindowName, "", "Edit2")
			If Instr(oPEIDString, "Inno") <> 0 or Instr(oPEIDString, "Borland") <> 0 Then
				oLogging.CreateEntry "Inno Setup package detected !", LogTypeInfo
				oEnvironment.item("AppExeSwitches") = " /VERYSILENT /SP- /NORESTART /SUPPRESSMSGBOXES"
			ElseIf Instr(oPEIDString, "Wise") <> 0	Then
				oLogging.CreateEntry "Wise package detected !", LogTypeInfo
				oEnvironment.item("AppExeSwitches") = " /s"
			ElseIf Instr(oPEIDString, "Nullsoft") <> 0	Then
				oLogging.CreateEntry "Nullsoft package detected !", LogTypeInfo
				oEnvironment.item("AppExeSwitches") = " /S"
			Elseif Instr(oPEIDString, "InstallShield AFW") <> 0	Then
				oLogging.CreateEntry "InstallShield AFW package detected !", LogTypeInfo
				oEnvironment.item("AppExeSwitches") = " /s /a /s /sms /f1"""" /f2"""""
			Elseif Instr(oPEIDString, "InstallShield 2003") <> 0	Then
				oLogging.CreateEntry "InstallShield 2003 package detected !", LogTypeInfo
				oEnvironment.item("AppExeSwitches") = " /v""/qn"""
			Else
				oLogging.CreateEntry "PEiD was unable to detect file type, rolling back to standard method !", LogTypeInfo
				oEnvironment.item("AppExeSwitches") = " /S"	
			End If
		End If	
	End Function	
	
End Class

	</script>
</job>
